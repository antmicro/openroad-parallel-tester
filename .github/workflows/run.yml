# Copyright 2024 Antmicro
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "openroad tests"
run-name: ${{ github.actor }}
on: [push]
jobs:
  build:
    runs-on: [self-hosted, Linux, X64]
    container: debian:bullseye-slim
    env:
      GHA_MACHINE_TYPE: "n2-standard-8"
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: build
        shell: bash
        run: |
          ./apt_install.sh
          python3 -m pip install --no-cache-dir --upgrade tabulate
          third-party/deps.sh --or-tools-arch amd64 --or-tools-os debian --or-tools-os-version 11 --skip-valgrind
          third-party/download.sh --full --openroad-flow-scripts-revision 0adaebe958681ae37a4c431081eba33f27a87411 --lsoracle-revision febd1523e33bf5967a5556ec64c3d3057c54726e
          source ./dependencies/env.sh
          echo "OPENROAD BUILD CONFIGURATION:"
          echo "-----------------------------"
          env
          echo "-----------------------------"
          cd OpenROAD-flow-scripts
          git -C ./tools/OpenROAD checkout b0d81bbb0dc36cd3021c9b11209bb1a2fcad5294
          git -C ./tools/OpenROAD submodule update --recursive
          cmake tools/OpenROAD -B tools/OpenROAD/build -D CMAKE_INSTALL_PREFIX="$PWD/tools/install/OpenROAD" -D BUILD_GUI=OFF -DCMAKE_CXX_FLAGS="${OPENROAD_OPTS}" -D CMAKE_C_FLAGS="${OPENROAD_OPTS}" ${OPENROAD_APP_ARGS} 2>&1 | tee ../build-openroad.log
          cmake --build tools/OpenROAD/build --target install -j $(nproc --all) 2>&1 | tee -a ../build-openroad.log
          make install -C tools/yosys -j $(nproc --all) CONFIG=gcc PREFIX="$PWD/tools/install/yosys" ${YOSYS_ARGS} | tee ../build-yosys.log
          cp -r flow/designs/nangate45/ariane133 flow/designs/nangate45/ariane133_50clk
          cd ../
          python3 clockify_ariane.py OpenROAD-flow-scripts/flow/designs/nangate45/ariane133_50clk/ariane.sdc OpenROAD-flow-scripts/flow/designs/nangate45/ariane133_50clk/config.mk
          echo "-------"
          cat OpenROAD-flow-scripts/flow/designs/nangate45/ariane133_50clk/ariane.sdc
          echo "-------"
          cat OpenROAD-flow-scripts/flow/designs/nangate45/ariane133_50clk/config.mk
          echo "-------"
          tar cvf workspace.tar ./*
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: workspace-tarball
          path: |
            workspace.tar

  cache_flows:
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        designs: [ariane133_50clk, ariane133]
    env:
      GHA_MACHINE_TYPE: "n2-standard-8"
    runs-on: [self-hosted, Linux, X64]
    container: debian:bullseye-slim
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: workspace-tarball
      - name: untar workspace
        shell: bash
        run: |
          tar xvf workspace.tar
          rm workspace.tar
      - name: run flow
        shell: bash
        run: |
          ./apt_install.sh
          export LD_LAST_PATH=$LD_LIBRARY_PATH
          source ./dependencies/env.sh
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$LD_LAST_PATH
          # To combat instability, make the cache step single core before running tests
          make -C OpenROAD-flow-scripts/flow/ DESIGN_CONFIG=designs/nangate45/${{ matrix.designs }}/config.mk cts OR_ARGS='-threads 1' -e LD_LIBRARY_PATH=$LD_LIBRARY_PATH 
          tar cvf workspace-${{ matrix.designs }}.tar ./*
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: workspace-tarball-${{ matrix.designs }}
          path: |
            workspace-${{ matrix.designs }}.tar

  run:
    strategy:
      fail-fast: false
      matrix:
        designs: [ariane133_50clk, ariane133]
    timeout-minutes: 720
    runs-on: [self-hosted, Linux, X64]
    container: debian:bullseye-slim
    needs: [cache_flows]
    env:
      GHA_MACHINE_TYPE: "n2-standard-8"
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: workspace-tarball-${{ matrix.designs }}
      - name: untar workspace
        shell: bash
        run: |
          tar xvf workspace-${{ matrix.designs }}.tar
      - name: run
        shell: bash
        run: |
          ./apt_install.sh
          pip3 install --user tqdm
          echo "Starting benchmark"
          export LD_LAST_PATH=$LD_LIBRARY_PATH
          source ./dependencies/env.sh
          export LD_LIBRARY_PATH=$LD_LAST_PATH:$LD_LIBRARY_PATH
          python3 test.py ${{ matrix.designs }}
          tar cvf output-${{ matrix.designs }}.tar ./output_${{ matrix.designs }}
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ matrix.designs }}
          path: |
            output-${{ matrix.designs }}.tar
  collect_data:
    runs-on: [self-hosted, Linux, X64]
    container: debian:bullseye-slim
    needs: [run]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: output-*
          path: test_artifacts
          merge-multiple: true
      - name: build
        shell: bash
        run: |
          ./apt_install.sh
          mv test_artifacts/output-*.tar ./
          tar xvf output-*.tar
          python3 report.py >> $GITHUB_STEP_SUMMARY
          cat $GITHUB_STEP_SUMMARY
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: $GITHUB_STEP_SUMMARY
